#lang racket/base
(provide (all-defined-out))
(require ffi/unsafe
         "definer.rkt"
         "types.rkt")

(define-treesitter node-type (_fun _TSNode -> _string)
  #:c-id ts_node_type)
(define-treesitter node-symbol (_fun _TSNode -> _TSSymbol)
  #:c-id ts_node_symbol)
(define-treesitter node-start-byte (_fun _TSNode -> _uint32)
  #:c-id ts_node_start_byte)
(define-treesitter node-start-point (_fun _TSNode -> _TSPoint)
  #:c-id ts_node_start_point)
(define-treesitter node-end-byte (_fun _TSNode -> _uint32)
  #:c-id ts_node_end_byte)
(define-treesitter node-end-point (_fun _TSNode -> _TSPoint)
  #:c-id ts_node_end_point)
(define-treesitter node->string (_fun _TSNode -> _string)
  #:c-id ts_node_string)
(define-treesitter node-is-null (_fun _TSNode -> _bool)
  #:c-id ts_node_is_null)
(define-treesitter node-is-named (_fun _TSNode -> _bool)
  #:c-id ts_node_is_named)
(define-treesitter node-is-missing (_fun _TSNode -> _bool)
  #:c-id ts_node_is_missing)
(define-treesitter node-is-extra (_fun _TSNode -> _bool)
  #:c-id ts_node_is_extra)
(define-treesitter node-has-changes (_fun _TSNode -> _bool)
  #:c-id ts_node_has_changes)
(define-treesitter node-has-error (_fun _TSNode -> _bool)
  #:c-id ts_node_has_error)
(define-treesitter node-parent (_fun _TSNode -> _TSNode)
  #:c-id ts_node_parent)
(define-treesitter node-child (_fun (node index) ::
                                    (node : _TSNode)
                                    (index : _uint32)
                                    -> _TSNode)
  #:c-id ts_node_child)
(define-treesitter node-field-name-for-child (_fun (node index) ::
                                                   (node : _TSNode)
                                                   (index : _uint32)
                                                   -> _string)
  #:c-id ts_node_field_name_for_child)
(define-treesitter node-child-count (_fun _TSNode -> _uint32)
  #:c-id ts_node_child_count)
(define-treesitter node-named-child (_fun (node index) ::
                                          (node : _TSNode)
                                          (index : _uint32)
                                          -> _TSNode)
  #:c-id ts_node_named_child)
(define-treesitter node-named-child-count (_fun _TSNode -> _uint32)
  #:c-id ts_node_named_child_count)
(define-treesitter node-child-by-field-name (_fun (self field-name field-name-length) ::
                                                  (self : _TSNode)
                                                  (field-name : _string)
                                                  (field-name-length : _uint32)
                                                  -> _TSNode)
  #:c-id ts_node_child_by_field_name)
(define-treesitter node-child-by-field-id (_fun (node field-id) ::
                                                (node : _TSNode)
                                                (field-id : _TSFieldId)
                                                -> _TSNode)
  #:c-id ts_node_child_by_field_id)
(define-treesitter node-next-sibling (_fun _TSNode -> _TSNode)
  #:c-id ts_node_next_sibling)
(define-treesitter node-prev-sibling (_fun _TSNode -> _TSNode)
  #:c-id ts_node_prev_sibling)
(define-treesitter node-next-named-sibling (_fun _TSNode -> _TSNode)
  #:c-id ts_node_next_named_sibling)
(define-treesitter node-prev-named-sibling (_fun _TSNode -> _TSNode)
  #:c-id ts_node_prev_named_sibling)
(define-treesitter node-first-child-for-byte (_fun (node byte) ::
                                                   (node : _TSNode)
                                                   (byte : _uint32)
                                                   -> _TSNode)
  #:c-id ts_node_first_child_for_byte)
(define-treesitter node-first-named-child-for-byte (_fun (node byte) ::
                                                         (node : _TSNode)
                                                         (byte : _uint32)
                                                         -> _TSNode)
  #:c-id ts_node_first_named_child_for_byte)
(define-treesitter node-descendant-for-byte-range (_fun (node start end) ::
                                                        (node : _TSNode)
                                                        (start : _uint32)
                                                        (end : _uint32)
                                                        -> _TSNode)
  #:c-id ts_node_descendant_for_byte_range)
(define-treesitter node-descendant-for-point-range (_fun (node start end) ::
                                                         (node : _TSNode)
                                                         (start : _TSPoint)
                                                         (end : _TSPoint)
                                                         -> _TSNode)
  #:c-id ts_node_descendant_for_point_range)
(define-treesitter node-named-descendant-for-byte-range (_fun (node start end) ::
                                                              (node : _TSNode)
                                                              (start : _uint32)
                                                              (end : _uint32)
                                                              -> _TSNode)
  #:c-id ts_node_named_descendant_for_byte_range)
(define-treesitter node-named-descendant-for-point-range (_fun (node start end) ::
                                                               (node : _TSNode)
                                                               (start : _TSPoint)
                                                               (end : _TSPoint)
                                                               -> _TSNode)
  #:c-id ts_node_named_descendant_for_point_range)
(define-treesitter node-edit (_fun (node edit) ::
                                   (node : _TSNodeRef)
                                   (edit : _TSInputEditRef)
                                   -> _void)
  #:c-id ts_node_edit)
(define-treesitter node-eq (_fun (node other) ::
                                 (node : _TSNode)
                                 (other : _TSNode)
                                 -> _bool)
  #:c-id ts_node_eq)
